% //**************************************************************************
% // Purpose: Implement cas_test in MATLAB.
% // Author:  DANG Truong
% // Update:  06/05/2018
% // Remark:  The array of struct is replaced by a cell array, to
% //          efficiently mimic the list() data structure of SCILAB.
% // Date:    01/05/2018
% // Remark:  In SCILAB, we have the list() data structure, which is a
% //          generic list. 
% //          In MATLAB, I emulate the list() by a hand-coded array of struct.
% //**************************************************************************

% Test case 1
ue1 = @(x,y) sin(pi.*x).*sin(pi.*y);
f1  = @(x,y) 2.*pi.^2.*sin(pi.*x).*sin(pi.*y);

coeff_cte = @(x,y) 1. ;

cas_test{1}=struct('nom','u(x,y)=sin(pi*x)sin(pi*y)',...
		     'coeff_k',coeff_cte,...
		     'uexacte',ue1,...
		     'source',f1,...
		     'bordD',ue1);
         
% Test case 2         
f2  = @(x,y) 32*y.*(1-y)+32*x.*(1-x);
ue2 = @(x,y) 16*x.*(1-x)*y.*(1-y);

cas_test{end+1}=struct('nom','u(x,y)=16x(1-x)y(1-y)',...
		     'coeff_k',coeff_cte,...
		     'uexacte',ue2,...
		     'source',f2,...
		     'bordD',ue2);
         
% Test case 3
f3  = @(x,y) -(-(1-y).^2.*sin((1-x).*(1-y))+6*(1-x).*(1-y).^2-(1-x).^2.*sin((1-x).*(1-y))+2*(1-x).^3);
ue3 = @(x,y) sin((1-x).*(1-y))+(1-x).^3.*(1-y).^2;

cas_test{end+1}=struct('nom','u(x,y)=sin((1-x)(1-y))+(1-x)^3(1-y)^2',...
		     'coeff_k',coeff_cte,...
		     'uexacte',ue3,...
		     'source',f3,...
		     'bordD',ue3);
         
% Test case 4
f4  = @(x,y) -2.*(y-2/3).^2-2.*(x-1/3).^2;
ue4 = @(x,y)(x-1/3).^2.*(y-2/3).^2;

cas_test{end+1}=struct('nom','u(x,y)=(x-1/3)^2(y-2/3)^2',...
		     'coeff_k',coeff_cte,...
		     'uexacte',ue4,...
		     'source',f4,...
		     'bordD',ue4);
         
% Test case 5
ubord2 = @(x,y) y;
f_nulle = @(x,y) 0. ;

cas_test{end+1}=struct('nom','Ecoulement vertical dans un reseau de fractures',...
		     'source',f_nulle,...
		     'coeff_k',coeff_cte,...
		     'bordD',ubord2,...
		     'bordN',f_nulle,...
		     'beta',0,...
		     'courant',40);
         
% Test case 6
%**************************************************************************
%  La solution est un produit de sinus
%  mais le coefficient de diffusion est matriciel et représente un champ 
%  tournant
%**************************************************************************
cas_test{end+1}=struct('nom','u(x,y)=sin(pi*x)sin(pi*y) anisotrope',...
		     'coeff_k',coeff_cte,...
		     'uexacte',ue1,...
		     'source',@f5,...
		     'bordD',ue1,...
		     'coeff_mat',struct('Axx',@mat_xx_cont,'Axy',@mat_xy_cont,'Ayy',@mat_yy_cont), ...
		     'methode','exacte');
         
% Test case 7
%**************************************************************************
%  La solution est polynomiale par morceaux
%  et le coefficient de diffusion est isotrope mais discontinu à travers
%  la ligne x=0.5
%**************************************************************************
cas_test{end+1}=struct('nom','u(x,y)=polynomiale isotrope discontinue',...
		     'uexacte',@ue6bis,...
		     'source',@f6bis,...
		     'bordD',@ue6bis,...
		     'coeff_k',@coeff_dis,...
		     'methode','exacte');
         
% Test case 8
%**************************************************************************
%  La solution est polynomiale par morceaux
%  et le coefficient de diffusion est anisotrope et discontinu à travers
%  la ligne x=0.5
%**************************************************************************
cas_test{end+1}=struct('nom','u(x,y)=polynomiale anisotrope discontinue',...
		     'uexacte',@ue6,...
		     'source',@f6,...
		     'bordD',@ue6,...
		     'coeff_mat',struct('Axx',@mat_xx_dis,'Axy',@mat_xy_dis,'Ayy',@mat_yy_dis), ...
		     'methode','exacte');
         
% Test case 9
%**************************************************************************
%  From the paper of 
%**************************************************************************

f9 = @(x,y) 2.*pi.*x.*exp(x).*sin(pi.*y) - 2.*y.*exp(x).*cos(pi.*y) ...
    - x.*y.*exp(x).*cos(pi.*y) + pi.^2.*x.*y.*exp(x).*cos(pi.*y);
ue9 = @(x,y) x.*y.*exp(x).*cos(pi.*y);
cas_test{end+1}=struct('nom','u(x,y)=xy*exp(x)cos(pi*y)',...
		     'coeff_k',coeff_cte,...
		     'uexacte',ue9,...
		     'source',f9,...
		     'bordD',ue9);
